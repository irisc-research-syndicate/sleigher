define endian=big;
define alignment=8;

define space ram type=ram_space size=4 default;
define space register type=register_space size=4;

define register offset=0x00000 size=4 [
    r0 r1 r2 r3 r4 r5 r6 r7
    r8 r9 r10 r11 r12 r13 r14 r15
];

define token instr(32)
    op=(27, 31) 
    rs=(23, 26)
    rd=(19, 22)
    rt=(15, 18)
    funct=(0, 14)
    imm16_sx=(18, 18)
    imm16_hi=(17, 17)
    simm16=(0, 15) signed
    uimm16=(0, 15)
;

attach variables [ rs rd rt ] [
    r0 r1 r2 r3 r4 r5 r6 r7
    r8 r9 r10 r11 r12 r13 r14 r15
];

IMM16: uimm16 is imm16_sx=0 & imm16_hi=0 & uimm16 { }
IMM16: simm16 is imm16_sx=1 & imm16_hi=0 & simm16 { }
IMM16: calc is imm16_sx=0 & imm16_hi=1 & uimm16 [ calc = uimm16 << 16; ] { }
IMM16: calc is imm16_sx=1 & imm16_hi=1 & simm16 [ calc = simm16 << 8; ] { }

:unk.^op rd, rs, IMM16 is op & rd & rs & IMM16 { }
:add rd, rs, IMM16 is op=0 & rd & rs & IMM16 { }
:sub rd, rs, IMM16 is op=1 & rd & rs & IMM16 { }
:or rd, rs, IMM16 is op=2 & rd & rs & IMM16 { }
:and rd, rs, IMM16 is op=4 & rd & rs & IMM16 { }
:xor rd, rs, IMM16 is op=5 & rd & rs & IMM16 { }

:unk.^funct rd, rs, rt is op=31 & funct & rd & rs & rt { }
:add rd, rs, rt is op=31 & funct=0 & rd & rs & rt & funct { }
:sub rd, rs, rt is op=31 & funct=1 & rd & rs & rt & funct { }
:or rd, rs, rt  is op=31 & funct=2 & rd & rs & rt & funct { }
:and rd, rs, rt is op=31 & funct=3 & rd & rs & rt & funct { }
:xor rd, rs, rt is op=31 & funct=4 & rd & rs & rt & funct { }